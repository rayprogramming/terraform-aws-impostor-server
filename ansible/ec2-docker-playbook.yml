- become: true
  hosts: all
  name: Impostor-install
  gather_facts: true
  collections:
    - community.docker
  vars:
    docker_image_name: "aeonlucid/impostor"
    docker_container_name: "impostor"
  tasks:

  - name: "Impostor/Docker on RHEL-based systems"
    when: ansible_os_family == "RedHat"
    block:

      # Note: this is dumb, but some modules require Python2 and others require Python3, so the interpreter is set per task depending on what is needed (e.g. yum requires Python2, Docker requires Python3)
      - name: "Make sure system is up-to-date first"
        vars:
          ansible_python_interpreter: /usr/bin/python
        ansible.builtin.yum:
          name: '*'
          state: latest
          update_cache: true

      - name: "Install packages for Docker"
        vars:
          ansible_python_interpreter: /usr/bin/python
        ansible.builtin.yum:
          name:
          - docker
          - python3
          - git
          state: latest

      - name: "Verify the Docker service is running"
        ansible.builtin.service:
          name: docker
          state: started

      - name: "Install prerequisites for Ansible community.docker"
        vars:
          ansible_python_interpreter: /usr/bin/python
        ansible.builtin.yum:
          name:
          - python3-requests
          - python3-pip
          state: latest
          update_cache: false

      - name: "Install Docker SDK for Python3"
        vars:
          ansible_python_interpreter: /usr/bin/python3
        ansible.builtin.pip:
          name: docker
          executable: pip3

      - name: Pull Impostor Docker image from Hub
        vars:
          ansible_python_interpreter: /usr/bin/python3
        community.docker.docker_image:
          name: "{{ docker_image_name }}"
          source: pull

      - name: Create and Start Docker container
        vars:
          ansible_python_interpreter: /usr/bin/python3
        community.docker.docker_container:
          name: "{{ docker_container_name }}"
          image: "{{ docker_image_name }}"
          state: started
          recreate: true
          published_ports: 0.0.0.0:22023:22023/udp
          container_default_behavior: no_defaults

  # I have a different playbook I put together to do all of this using Docker-Compose instead, if we needed to scale for some reason